package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.domain.Event;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.EventRepository;

import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Map;

public class EventRepositoryImpl extends BaseRepository<Event> implements EventRepository  {

    {
        repositoryName = "Event";
        clazz = Event.class;
    }

    public Event find(long id) {
        return findBy(Map.of("id", id));
    }

    @Override
    public void save(Event event) {
        doSQLQuery(
                "INSERT INTO `Event` (`userId`, `type`, `creationTime`) VALUES (?, ?, NOW())",
                SQLSetter.newSQLSetter(event.getUserId(), event.getType()),
                statement -> {
                    if (statement.executeUpdate() != 1) {
                        throw new RepositoryException("Can't save Event.");
                    } else {
                        ResultSet generatedKeys = statement.getGeneratedKeys();
                        if (generatedKeys.next()) {
                            event.setId(generatedKeys.getLong(1));
                            event.setCreationTime(find(event.getId()).getCreationTime());
                        } else {
                            throw new RepositoryException("Can't save Event [no autogenerated fields].");
                        }
                        return null;
                    }
                },
                "Can't save Event.",
                Statement.RETURN_GENERATED_KEYS);
    }
}
