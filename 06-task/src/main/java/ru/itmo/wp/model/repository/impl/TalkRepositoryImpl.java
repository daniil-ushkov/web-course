package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.domain.Event;
import ru.itmo.wp.model.domain.Talk;
import ru.itmo.wp.model.domain.User;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.TalkRepository;

import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Map;

public class TalkRepositoryImpl extends BaseRepository<Talk> implements TalkRepository {
    {
        repositoryName = "Talk";
        clazz = Talk.class;
    }

    public Talk find(long id) {
        return findBy(Map.of("id", id));
    }

    @Override
    public void save(Talk talk) {
        doSQLQuery(
                "INSERT INTO `Talk` (`sourceUserId`, `targetUserId`, `text`, `creationTime`) VALUES (?, ?, ?, NOW())",
                SQLSetter.newSQLSetter(talk.getSourceUserId(), talk.getTargetUserId(), talk.getText()),
                statement -> {
                    if (statement.executeUpdate() != 1) {
                        throw new RepositoryException("Can't save Talk.");
                    } else {
                        ResultSet generatedKeys = statement.getGeneratedKeys();
                        if (generatedKeys.next()) {
                            talk.setId(generatedKeys.getLong(1));
                            talk.setCreationTime(find(talk.getId()).getCreationTime());
                        } else {
                            throw new RepositoryException("Can't save Talk [no autogenerated fields].");
                        }
                        return null;
                    }
                },
                "Can't save Talk.",
                Statement.RETURN_GENERATED_KEYS);
    }
}
