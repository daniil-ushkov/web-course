package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.domain.User;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.UserRepository;

import java.sql.*;
import java.util.Map;

public class UserRepositoryImpl extends BaseRepository<User> implements UserRepository {

    {
        repositoryName = "User";
        clazz = User.class;
    }

    @Override
    public User find(long id) {
        return findBy(Map.of("id", id));
    }

    @Override
    public User findByLogin(String login) {
        return findBy(Map.of("login", login));
    }

    @Override
    public User findByEmail(String email) {
        return findBy(Map.of("email", email));
    }

    // todo: clean `save`
    @Override
    public void save(User user, String passwordSha) {
        doSQLQuery(
                "INSERT INTO `User` (`login`, `email`, `passwordSha`, `creationTime`) VALUES (?, ?, ?, NOW())",
                SQLSetter.newSQLSetter(user.getLogin(), user.getEmail(), passwordSha),
                statement -> {
                    if (statement.executeUpdate() != 1) {
                        throw new RepositoryException("Can't save User.");
                    } else {
                        ResultSet generatedKeys = statement.getGeneratedKeys();
                        if (generatedKeys.next()) {
                            user.setId(generatedKeys.getLong(1));
                            user.setCreationTime(find(user.getId()).getCreationTime());
                        } else {
                            throw new RepositoryException("Can't save User [no autogenerated fields].");
                        }
                        return null;
                    }
                },
                "Can't save User.",
                Statement.RETURN_GENERATED_KEYS);
    }
}
